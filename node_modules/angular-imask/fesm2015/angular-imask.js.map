{"version":3,"file":"angular-imask.js","sources":["../../src/imask-factory.ts","../../src/imask.directive.ts","../../src/imask.pipe.ts","../../src/default-imask-factory.ts","../../src/directive.module.ts","../../src/imask.module.ts","../../src/angular-imask.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\n\nimport IMask from 'imask';\n\n\n@Injectable({ providedIn: 'root' })\nexport abstract class IMaskFactory {\n    abstract create<Opts extends IMask.AnyMaskedOptions>(el: IMask.MaskElement | IMask.HTMLMaskingElement, opts: Opts): IMask.InputMask<Opts>\n}\n","import {\n  Directive, ElementRef, Input, Output, forwardRef, Provider, Renderer2,\n  EventEmitter, OnDestroy, OnChanges, AfterViewInit,\n  Optional, Inject, SimpleChanges,\n} from '@angular/core';\nimport { NG_VALUE_ACCESSOR, ControlValueAccessor, COMPOSITION_BUFFER_MODE } from '@angular/forms';\n\nimport { IMaskFactory } from './imask-factory';\nimport IMask from 'imask';\n\n\nexport const MASKEDINPUT_VALUE_ACCESSOR: Provider = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => IMaskDirective),\n  multi: true\n};\n\nconst DEFAULT_IMASK_ELEMENT = (elementRef: any) => elementRef.nativeElement;\n@Directive({\n  selector: '[imask]',\n  exportAs: 'imask',\n  host: {\n    '(input)': '_handleInput($event.target.value)',\n    '(blur)': 'onTouched()',\n    '(compositionstart)': '_compositionStart()',\n    '(compositionend)': '_compositionEnd($event.target.value)'\n  },\n  providers: [MASKEDINPUT_VALUE_ACCESSOR],\n})\nexport class IMaskDirective<Opts extends IMask.AnyMaskedOptions> implements ControlValueAccessor, AfterViewInit, OnDestroy, OnChanges {\n  maskRef?: IMask.InputMask<Opts>;\n  onTouched: any;\n  onChange: any;\n  private _viewInitialized: boolean;\n  private _composing: boolean;\n  private _writingValue: any;\n  private _writing: boolean;\n\n  @Input() imask?: Opts;\n  @Input() unmask?: boolean|'typed';\n  @Input() imaskElement: (elementRef: ElementRef, directiveRef: any) => IMask.MaskElement;\n  @Output() accept: EventEmitter<any>;\n  @Output() complete: EventEmitter<any>;\n\n  constructor(private _elementRef: ElementRef,\n              private _renderer: Renderer2,\n              private _factory: IMaskFactory,\n              @Optional() @Inject(COMPOSITION_BUFFER_MODE) private _compositionMode: boolean) {\n    // init here to support AOT (TODO may be will work with ng-packgr - need to check)\n    this.onTouched = () => {};\n    this.onChange = () => {};\n    this.imaskElement = DEFAULT_IMASK_ELEMENT;\n    this.accept = new EventEmitter();\n    this.complete = new EventEmitter();\n    this._viewInitialized = false;\n    this._composing = false;\n    this._writing = false;\n\n    if (this._compositionMode == null) {\n      this._compositionMode = !this._isAndroid();\n    }\n  }\n\n  get element () {\n    return this.imaskElement(this._elementRef, this);\n  }\n\n  get maskValue (): any {\n    if (!this.maskRef) return this.element.value;\n\n    if (this.unmask === 'typed') return this.maskRef.typedValue;\n    if (this.unmask) return this.maskRef.unmaskedValue;\n    return this.maskRef.value;\n  }\n\n  set maskValue (value: any) {\n    if (this.maskRef) {\n      if (this.unmask === 'typed') this.maskRef.typedValue = value;\n      else if (this.unmask) this.maskRef.unmaskedValue = value;\n      else this.maskRef.value = value;\n    } else {\n      this._renderer.setProperty(this.element, 'value', value);\n    }\n  }\n\n  ngAfterViewInit() {\n    if (this.imask) this.initMask();\n\n    this._viewInitialized = true;\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    if (changes.elementRef && !this.imaskElement) this.imaskElement = DEFAULT_IMASK_ELEMENT;\n\n    if (!changes.imask || !this._viewInitialized) return;\n\n    if (this.imask) {\n      if (this.maskRef) this.maskRef.updateOptions(this.imask);\n      else {\n        this.initMask();\n        this.onChange(this.maskValue);\n      }\n    } else {\n      this.destroyMask();\n    }\n  }\n\n  destroyMask () {\n    if (this.maskRef) {\n      this.maskRef.destroy();\n      delete this.maskRef;\n    }\n  }\n\n  ngOnDestroy () {\n    this.destroyMask();\n    this.accept.complete();\n    this.complete.complete();\n  }\n\n  beginWrite (value: any): void {\n    this._writing = true;\n    this._writingValue = value;\n  }\n\n  endWrite (): any {\n    this._writing = false;\n    return this._writingValue;\n  }\n\n  writeValue(value: any) {\n    value = value == null ? '' : value;\n\n    if (this.maskRef) {\n      this.beginWrite(value);\n\n      if (this.maskValue !== value ||\n        // handle cases like Number('') === 0,\n        // for details see https://github.com/uNmAnNeR/imaskjs/issues/134\n        (typeof value !== 'string' && this.maskRef.value === '') &&\n          !this.maskRef.el.isActive\n      ) {\n        this.maskValue = value;\n      }\n    } else {\n      this._renderer.setProperty(this.element, 'value', value);\n    }\n  }\n\n  _onAccept () {\n    const value = this.maskValue;\n    // if value was not changed during writing don't fire events\n    // for details see https://github.com/uNmAnNeR/imaskjs/issues/136\n    if (this._writing && value === this.endWrite()) return;\n    this.onChange(value);\n    this.accept.emit(value);\n  }\n\n  _onComplete () {\n    this.complete.emit(this.maskValue);\n  }\n\n  private initMask () {\n    this.maskRef = this._factory.create(this.element, this.imask as Opts)\n      .on('accept', this._onAccept.bind(this))\n      .on('complete', this._onComplete.bind(this));\n  }\n\n  setDisabledState (isDisabled: boolean) {\n    this._renderer.setProperty(this.element, 'disabled', isDisabled)\n  }\n\n  registerOnChange(fn: (_: any) => void): void { this.onChange = fn }\n  registerOnTouched(fn: () => void): void { this.onTouched = fn }\n\n  _handleInput(value: any): void {\n    // if mask is attached all input goes throw mask\n    if (this.maskRef) return;\n\n    if (!this._compositionMode || (this._compositionMode && !this._composing)) {\n      this.onChange(value);\n    }\n  }\n\n  _compositionStart(): void { this._composing = true; }\n\n  _compositionEnd(value: any): void {\n    this._composing = false;\n    this._compositionMode && this._handleInput(value);\n  }\n\n  private _isAndroid(): boolean {\n    return /android (\\d+)/.test(navigator.userAgent.toLowerCase());\n  }\n}\n","import { Pipe, PipeTransform } from '@angular/core';\n\nimport { pipe } from 'imask';\nexport { PIPE_TYPE, pipe } from 'imask';\n\n\n/*\n * Transforms value through mask\n * Takes mask and optionally `from` and `to` pipe types.\n * Usage:\n *   value | imask:MASK_OR_MASKED:opt_from:opt_to\n * Example:\n *   {{ 2 | imask:mask }}\n*/\n@Pipe({name: 'imask'})\nexport class IMaskPipe implements PipeTransform {\n  transform (...args: Parameters<typeof pipe>): ReturnType<typeof pipe> {\n    return pipe(...args);\n  }\n}\n","import { IMaskFactory } from \"./imask-factory\";\nimport { Injectable } from \"@angular/core\";\n\nimport IMask from 'imask';\n\n\n@Injectable({ providedIn: 'root' })\nexport class DefaultImaskFactory implements IMaskFactory {\n    create<Opts extends IMask.AnyMaskedOptions>(el: IMask.MaskElement | IMask.HTMLMaskingElement, opts: Opts) {\n        return IMask(el, opts);\n    }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { IMaskDirective } from './imask.directive';\nimport { IMaskFactory } from './imask-factory';\nimport { DefaultImaskFactory } from './default-imask-factory';\n\n\n@NgModule({\n  imports: [CommonModule],\n  declarations: [IMaskDirective],\n  providers: [{provide: IMaskFactory, useClass: DefaultImaskFactory}],\n  exports: [IMaskDirective]\n})\nexport class IMaskDirectiveModule {}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { IMaskPipe } from './imask.pipe';\nimport { IMaskDirectiveModule } from './directive.module';\n\n@NgModule({\n  imports: [CommonModule, IMaskDirectiveModule],\n  declarations: [IMaskPipe],\n  exports: [IMaskPipe, IMaskDirectiveModule]\n})\nexport class IMaskModule {}\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './index';\n\nexport {DefaultImaskFactory as Éµa} from './default-imask-factory';"],"names":[],"mappings":"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"}