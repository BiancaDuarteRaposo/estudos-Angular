import { ElementRef, Provider, Renderer2, EventEmitter, OnDestroy, OnChanges, AfterViewInit, SimpleChanges } from '@angular/core';
import { ControlValueAccessor } from '@angular/forms';
import { IMaskFactory } from './imask-factory';
import IMask from 'imask';
export declare const MASKEDINPUT_VALUE_ACCESSOR: Provider;
export declare class IMaskDirective<Opts extends IMask.AnyMaskedOptions> implements ControlValueAccessor, AfterViewInit, OnDestroy, OnChanges {
    private _elementRef;
    private _renderer;
    private _factory;
    private _compositionMode;
    maskRef?: IMask.InputMask<Opts>;
    onTouched: any;
    onChange: any;
    private _viewInitialized;
    private _composing;
    private _writingValue;
    private _writing;
    imask?: Opts;
    unmask?: boolean | 'typed';
    imaskElement: (elementRef: ElementRef, directiveRef: any) => IMask.MaskElement;
    accept: EventEmitter<any>;
    complete: EventEmitter<any>;
    constructor(_elementRef: ElementRef, _renderer: Renderer2, _factory: IMaskFactory, _compositionMode: boolean);
    get element(): IMask.MaskElement;
    get maskValue(): any;
    set maskValue(value: any);
    ngAfterViewInit(): void;
    ngOnChanges(changes: SimpleChanges): void;
    destroyMask(): void;
    ngOnDestroy(): void;
    beginWrite(value: any): void;
    endWrite(): any;
    writeValue(value: any): void;
    _onAccept(): void;
    _onComplete(): void;
    private initMask;
    setDisabledState(isDisabled: boolean): void;
    registerOnChange(fn: (_: any) => void): void;
    registerOnTouched(fn: () => void): void;
    _handleInput(value: any): void;
    _compositionStart(): void;
    _compositionEnd(value: any): void;
    private _isAndroid;
}
